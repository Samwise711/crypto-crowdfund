'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _semanticUiReact = require('semantic-ui-react');

var _campaign = require('../ethereum/campaign');

var _campaign2 = _interopRequireDefault(_campaign);

var _web = require('../ethereum/web3');

var _web2 = _interopRequireDefault(_web);

var _routes = require('../routes');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _jsxFileName = 'C:\\Users\\Dan\\Documents\\GitHub\\kickstart-local\\components\\ContributeForm.js'; //Message is to handle errors


var ContributeForm = function (_Component) {
  (0, _inherits3.default)(ContributeForm, _Component);

  function ContributeForm() {
    var _ref,
        _this2 = this;

    var _temp, _this, _ret;

    (0, _classCallCheck3.default)(this, ContributeForm);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = ContributeForm.__proto__ || (0, _getPrototypeOf2.default)(ContributeForm)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
      value: '',
      errorMessage: '',
      loading: false
    }, _this.onSubmit = function () {
      var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(event) {
        var campaign, accounts;
        return _regenerator2.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                event.preventDefault();
                campaign = (0, _campaign2.default)(_this.props.address);

                _this.setState({ loading: true, errorMessage: '' });

                _context.prev = 3;
                _context.next = 6;
                return _web2.default.eth.getAccounts();

              case 6:
                accounts = _context.sent;
                _context.next = 9;
                return campaign.methods.contribute().send({
                  from: accounts[0],
                  value: _web2.default.utils.toWei(_this.state.value, 'ether')
                });

              case 9:

                _routes.Router.replaceRoute('/campaigns/' + _this.props.address); //refresh page, cool, reruns script to update ethereum info!!
                _context.next = 15;
                break;

              case 12:
                _context.prev = 12;
                _context.t0 = _context['catch'](3);

                _this.setState({ errorMessage: _context.t0.message.split("\n")[0] });

              case 15:

                _this.setState({ loading: false, value: '' });

              case 16:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, _this2, [[3, 12]]);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }(), _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
  }

  (0, _createClass3.default)(ContributeForm, [{
    key: 'render',
    value: function render() {
      var _this3 = this;

      return _react2.default.createElement(_semanticUiReact.Form, { onSubmit: this.onSubmit, error: !!this.state.errorMessage, __source: {
          fileName: _jsxFileName,
          lineNumber: 39
        }
      }, _react2.default.createElement(_semanticUiReact.Form.Field, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 40
        }
      }, _react2.default.createElement('label', {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 41
        }
      }, 'Amount to Contribute'), _react2.default.createElement(_semanticUiReact.Input, {
        value: this.state.value,
        onChange: function onChange(event) {
          return _this3.setState({ value: event.target.value });
        },
        label: 'ether',
        labelPosition: 'right',
        __source: {
          fileName: _jsxFileName,
          lineNumber: 42
        }
      })), _react2.default.createElement(_semanticUiReact.Message, { error: true, header: 'Oops!', content: this.state.errorMessage, __source: {
          fileName: _jsxFileName,
          lineNumber: 49
        }
      }), _react2.default.createElement(_semanticUiReact.Button, { primary: true, loading: this.state.loading, __source: {
          fileName: _jsxFileName,
          lineNumber: 50
        }
      }, 'Contribute!'));
    }
  }]);

  return ContributeForm;
}(_react.Component);

exports.default = ContributeForm;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVua25vd24iXSwibmFtZXMiOlsiX2pzeEZpbGVOYW1lIiwiQ29udHJpYnV0ZUZvcm0iLCJfQ29tcG9uZW50IiwiX3JlZiIsIl90aGlzMiIsIl90ZW1wIiwiX3RoaXMiLCJfcmV0IiwiX2xlbiIsImFyZ3VtZW50cyIsImxlbmd0aCIsImFyZ3MiLCJBcnJheSIsIl9rZXkiLCJfX3Byb3RvX18iLCJjYWxsIiwiYXBwbHkiLCJjb25jYXQiLCJzdGF0ZSIsInZhbHVlIiwiZXJyb3JNZXNzYWdlIiwibG9hZGluZyIsIm9uU3VibWl0IiwiX3JlZjIiLCJtYXJrIiwiX2NhbGxlZSIsImV2ZW50IiwiY2FtcGFpZ24iLCJhY2NvdW50cyIsIndyYXAiLCJfY2FsbGVlJCIsIl9jb250ZXh0IiwicHJldiIsIm5leHQiLCJwcmV2ZW50RGVmYXVsdCIsInByb3BzIiwiYWRkcmVzcyIsInNldFN0YXRlIiwiZXRoIiwiZ2V0QWNjb3VudHMiLCJzZW50IiwibWV0aG9kcyIsImNvbnRyaWJ1dGUiLCJzZW5kIiwiZnJvbSIsInV0aWxzIiwidG9XZWkiLCJyZXBsYWNlUm91dGUiLCJ0MCIsIm1lc3NhZ2UiLCJzcGxpdCIsInN0b3AiLCJfeCIsImtleSIsInJlbmRlciIsIl90aGlzMyIsImNyZWF0ZUVsZW1lbnQiLCJlcnJvciIsIl9fc291cmNlIiwiZmlsZU5hbWUiLCJsaW5lTnVtYmVyIiwiRmllbGQiLCJvbkNoYW5nZSIsInRhcmdldCIsImxhYmVsIiwibGFiZWxQb3NpdGlvbiIsImhlYWRlciIsImNvbnRlbnQiLCJwcmltYXJ5Il0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUVBOzs7O0FBQ0E7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBTEEsSUFBSUEsZUFBZSxtRkFBbkIsQyxDQUVrRTs7O0FBS2xFLElBQUlDLGlCQUFpQixVQUFVQyxVQUFWLEVBQXNCO0FBQ3pDLDBCQUFVRCxj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bEIsRUFBeUI7QUFDakMsaUJBQU82QixPQUFPbEIsUUFBUCxDQUFnQixFQUFFbEIsT0FBT08sTUFBTXFDLE1BQU4sQ0FBYTVDLEtBQXRCLEVBQWhCLENBQVA7QUFDRCxTQUp3QjtBQUt6QjZDLGVBQU8sT0FMa0I7QUFNekJDLHVCQUFlLE9BTlU7QUFPekJQLGtCQUFVO0FBQ1JDLG9CQUFVM0QsWUFERjtBQUVSNEQsc0JBQVk7QUFGSjtBQVBlLE9BQTNCLENBbEJGLENBUEssRUFzQ0wsZ0JBQU1KLGFBQU4sMkJBQTZCLEVBQUVDLE9BQU8sSUFBVCxFQUFlUyxRQUFRLE9BQXZCLEVBQWdDQyxTQUFTLEtBQUtqRCxLQUFMLENBQVdFLFlBQXBELEVBQWtFc0MsVUFBVTtBQUNyR0Msb0JBQVUzRCxZQUQyRjtBQUVyRzRELHNCQUFZO0FBRnlGO0FBQTVFLE9BQTdCLENBdENLLEVBMkNMLGdCQUFNSixhQUFOLDBCQUVFLEVBQUVZLFNBQVMsSUFBWCxFQUFpQi9DLFNBQVMsS0FBS0gsS0FBTCxDQUFXRyxPQUFyQyxFQUE4Q3FDLFVBQVU7QUFDcERDLG9CQUFVM0QsWUFEMEM7QUFFcEQ0RCxzQkFBWTtBQUZ3QztBQUF4RCxPQUZGLEVBT0UsYUFQRixDQTNDSyxDQUFQO0FBcUREO0FBMUQyQixHQUFELENBQTdCOztBQTZEQSxTQUFPM0QsY0FBUDtBQUNELENBeElvQixrQkFBckI7O2tCQTBJZUEsYyIsImZpbGUiOiJ1bmtub3duIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IF9yZWdlbmVyYXRvclJ1bnRpbWUgZnJvbSAnYmFiZWwtcnVudGltZS9yZWdlbmVyYXRvcic7XG5pbXBvcnQgX2FzeW5jVG9HZW5lcmF0b3IgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL2FzeW5jVG9HZW5lcmF0b3InO1xuaW1wb3J0IF9PYmplY3QkZ2V0UHJvdG90eXBlT2YgZnJvbSAnYmFiZWwtcnVudGltZS9jb3JlLWpzL29iamVjdC9nZXQtcHJvdG90eXBlLW9mJztcbmltcG9ydCBfY2xhc3NDYWxsQ2hlY2sgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrJztcbmltcG9ydCBfY3JlYXRlQ2xhc3MgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzJztcbmltcG9ydCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVybic7XG5pbXBvcnQgX2luaGVyaXRzIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9pbmhlcml0cyc7XG52YXIgX2pzeEZpbGVOYW1lID0gJ0M6XFxcXFVzZXJzXFxcXERhblxcXFxEb2N1bWVudHNcXFxcR2l0SHViXFxcXGtpY2tzdGFydC1sb2NhbFxcXFxjb21wb25lbnRzXFxcXENvbnRyaWJ1dGVGb3JtLmpzJztcbmltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBGb3JtLCBJbnB1dCwgTWVzc2FnZSwgQnV0dG9uIH0gZnJvbSAnc2VtYW50aWMtdWktcmVhY3QnOyAvL01lc3NhZ2UgaXMgdG8gaGFuZGxlIGVycm9yc1xuaW1wb3J0IENhbXBhaWduIGZyb20gJy4uL2V0aGVyZXVtL2NhbXBhaWduJztcbmltcG9ydCB3ZWIzIGZyb20gJy4uL2V0aGVyZXVtL3dlYjMnO1xuaW1wb3J0IHsgUm91dGVyIH0gZnJvbSAnLi4vcm91dGVzJztcblxudmFyIENvbnRyaWJ1dGVGb3JtID0gZnVuY3Rpb24gKF9Db21wb25lbnQpIHtcbiAgX2luaGVyaXRzKENvbnRyaWJ1dGVGb3JtLCBfQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBDb250cmlidXRlRm9ybSgpIHtcbiAgICB2YXIgX3JlZixcbiAgICAgICAgX3RoaXMyID0gdGhpcztcblxuICAgIHZhciBfdGVtcCwgX3RoaXMsIF9yZXQ7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQ29udHJpYnV0ZUZvcm0pO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgcmV0dXJuIF9yZXQgPSAoX3RlbXAgPSAoX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoX3JlZiA9IENvbnRyaWJ1dGVGb3JtLl9fcHJvdG9fXyB8fCBfT2JqZWN0JGdldFByb3RvdHlwZU9mKENvbnRyaWJ1dGVGb3JtKSkuY2FsbC5hcHBseShfcmVmLCBbdGhpc10uY29uY2F0KGFyZ3MpKSksIF90aGlzKSwgX3RoaXMuc3RhdGUgPSB7XG4gICAgICB2YWx1ZTogJycsXG4gICAgICBlcnJvck1lc3NhZ2U6ICcnLFxuICAgICAgbG9hZGluZzogZmFsc2VcbiAgICB9LCBfdGhpcy5vblN1Ym1pdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBfcmVmMiA9IF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovX3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUoZXZlbnQpIHtcbiAgICAgICAgdmFyIGNhbXBhaWduLCBhY2NvdW50cztcbiAgICAgICAgcmV0dXJuIF9yZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlJChfY29udGV4dCkge1xuICAgICAgICAgIHdoaWxlICgxKSB7XG4gICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0LnByZXYgPSBfY29udGV4dC5uZXh0KSB7XG4gICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgIGNhbXBhaWduID0gQ2FtcGFpZ24oX3RoaXMucHJvcHMuYWRkcmVzcyk7XG5cblxuICAgICAgICAgICAgICAgIF90aGlzLnNldFN0YXRlKHsgbG9hZGluZzogdHJ1ZSwgZXJyb3JNZXNzYWdlOiAnJyB9KTtcblxuICAgICAgICAgICAgICAgIF9jb250ZXh0LnByZXYgPSAzO1xuICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSA2O1xuICAgICAgICAgICAgICAgIHJldHVybiB3ZWIzLmV0aC5nZXRBY2NvdW50cygpO1xuXG4gICAgICAgICAgICAgIGNhc2UgNjpcbiAgICAgICAgICAgICAgICBhY2NvdW50cyA9IF9jb250ZXh0LnNlbnQ7XG4gICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNhbXBhaWduLm1ldGhvZHMuY29udHJpYnV0ZSgpLnNlbmQoe1xuICAgICAgICAgICAgICAgICAgZnJvbTogYWNjb3VudHNbMF0sXG4gICAgICAgICAgICAgICAgICB2YWx1ZTogd2ViMy51dGlscy50b1dlaShfdGhpcy5zdGF0ZS52YWx1ZSwgJ2V0aGVyJylcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICBjYXNlIDk6XG5cbiAgICAgICAgICAgICAgICBSb3V0ZXIucmVwbGFjZVJvdXRlKCcvY2FtcGFpZ25zLycgKyBfdGhpcy5wcm9wcy5hZGRyZXNzKTsgLy9yZWZyZXNoIHBhZ2UsIGNvb2wsIHJlcnVucyBzY3JpcHQgdG8gdXBkYXRlIGV0aGVyZXVtIGluZm8hIVxuICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAxNTtcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICBjYXNlIDEyOlxuICAgICAgICAgICAgICAgIF9jb250ZXh0LnByZXYgPSAxMjtcbiAgICAgICAgICAgICAgICBfY29udGV4dC50MCA9IF9jb250ZXh0WydjYXRjaCddKDMpO1xuXG4gICAgICAgICAgICAgICAgX3RoaXMuc2V0U3RhdGUoeyBlcnJvck1lc3NhZ2U6IF9jb250ZXh0LnQwLm1lc3NhZ2Uuc3BsaXQoXCJcXG5cIilbMF0gfSk7XG5cbiAgICAgICAgICAgICAgY2FzZSAxNTpcblxuICAgICAgICAgICAgICAgIF90aGlzLnNldFN0YXRlKHsgbG9hZGluZzogZmFsc2UsIHZhbHVlOiAnJyB9KTtcblxuICAgICAgICAgICAgICBjYXNlIDE2OlxuICAgICAgICAgICAgICBjYXNlICdlbmQnOlxuICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5zdG9wKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9LCBfY2FsbGVlLCBfdGhpczIsIFtbMywgMTJdXSk7XG4gICAgICB9KSk7XG5cbiAgICAgIHJldHVybiBmdW5jdGlvbiAoX3gpIHtcbiAgICAgICAgcmV0dXJuIF9yZWYyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICB9O1xuICAgIH0oKSwgX3RlbXApLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihfdGhpcywgX3JldCk7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoQ29udHJpYnV0ZUZvcm0sIFt7XG4gICAga2V5OiAncmVuZGVyJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgdmFyIF90aGlzMyA9IHRoaXM7XG5cbiAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICBGb3JtLFxuICAgICAgICB7IG9uU3VibWl0OiB0aGlzLm9uU3VibWl0LCBlcnJvcjogISF0aGlzLnN0YXRlLmVycm9yTWVzc2FnZSwgX19zb3VyY2U6IHtcbiAgICAgICAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsXG4gICAgICAgICAgICBsaW5lTnVtYmVyOiAzOVxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICBGb3JtLkZpZWxkLFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIF9fc291cmNlOiB7XG4gICAgICAgICAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsXG4gICAgICAgICAgICAgIGxpbmVOdW1iZXI6IDQwXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgJ2xhYmVsJyxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgX19zb3VyY2U6IHtcbiAgICAgICAgICAgICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLFxuICAgICAgICAgICAgICAgIGxpbmVOdW1iZXI6IDQxXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAnQW1vdW50IHRvIENvbnRyaWJ1dGUnXG4gICAgICAgICAgKSxcbiAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KElucHV0LCB7XG4gICAgICAgICAgICB2YWx1ZTogdGhpcy5zdGF0ZS52YWx1ZSxcbiAgICAgICAgICAgIG9uQ2hhbmdlOiBmdW5jdGlvbiBvbkNoYW5nZShldmVudCkge1xuICAgICAgICAgICAgICByZXR1cm4gX3RoaXMzLnNldFN0YXRlKHsgdmFsdWU6IGV2ZW50LnRhcmdldC52YWx1ZSB9KTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBsYWJlbDogJ2V0aGVyJyxcbiAgICAgICAgICAgIGxhYmVsUG9zaXRpb246ICdyaWdodCcsXG4gICAgICAgICAgICBfX3NvdXJjZToge1xuICAgICAgICAgICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLFxuICAgICAgICAgICAgICBsaW5lTnVtYmVyOiA0MlxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pXG4gICAgICAgICksXG4gICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoTWVzc2FnZSwgeyBlcnJvcjogdHJ1ZSwgaGVhZGVyOiAnT29wcyEnLCBjb250ZW50OiB0aGlzLnN0YXRlLmVycm9yTWVzc2FnZSwgX19zb3VyY2U6IHtcbiAgICAgICAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsXG4gICAgICAgICAgICBsaW5lTnVtYmVyOiA0OVxuICAgICAgICAgIH1cbiAgICAgICAgfSksXG4gICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgQnV0dG9uLFxuICAgICAgICAgIHsgcHJpbWFyeTogdHJ1ZSwgbG9hZGluZzogdGhpcy5zdGF0ZS5sb2FkaW5nLCBfX3NvdXJjZToge1xuICAgICAgICAgICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLFxuICAgICAgICAgICAgICBsaW5lTnVtYmVyOiA1MFxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sXG4gICAgICAgICAgJ0NvbnRyaWJ1dGUhJ1xuICAgICAgICApXG4gICAgICApO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBDb250cmlidXRlRm9ybTtcbn0oQ29tcG9uZW50KTtcblxuZXhwb3J0IGRlZmF1bHQgQ29udHJpYnV0ZUZvcm07Il19
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVua25vd24iXSwibmFtZXMiOlsiX2pzeEZpbGVOYW1lIiwiQ29udHJpYnV0ZUZvcm0iLCJfQ29tcG9uZW50IiwiX3JlZiIsIl90aGlzMiIsIl90ZW1wIiwiX3RoaXMiLCJfcmV0IiwiX2xlbiIsImFyZ3VtZW50cyIsImxlbmd0aCIsImFyZ3MiLCJBcnJheSIsIl9rZXkiLCJfX3Byb3RvX18iLCJjYWxsIiwiYXBwbHkiLCJjb25jYXQiLCJzdGF0ZSIsInZhbHVlIiwiZXJyb3JNZXNzYWdlIiwibG9hZGluZyIsIm9uU3VibWl0IiwiX3JlZjIiLCJtYXJrIiwiX2NhbGxlZSIsImV2ZW50IiwiY2FtcGFpZ24iLCJhY2NvdW50cyIsIndyYXAiLCJfY2FsbGVlJCIsIl9jb250ZXh0IiwicHJldiIsIm5leHQiLCJwcmV2ZW50RGVmYXVsdCIsInByb3BzIiwiYWRkcmVzcyIsInNldFN0YXRlIiwiZXRoIiwiZ2V0QWNjb3VudHMiLCJzZW50IiwibWV0aG9kcyIsImNvbnRyaWJ1dGUiLCJzZW5kIiwiZnJvbSIsInV0aWxzIiwidG9XZWkiLCJyZXBsYWNlUm91dGUiLCJ0MCIsIm1lc3NhZ2UiLCJzcGxpdCIsInN0b3AiLCJfeCIsImtleSIsInJlbmRlciIsIl90aGlzMyIsImNyZWF0ZUVsZW1lbnQiLCJlcnJvciIsIl9fc291cmNlIiwiZmlsZU5hbWUiLCJsaW5lTnVtYmVyIiwiRmllbGQiLCJvbkNoYW5nZSIsInRhcmdldCIsImxhYmVsIiwibGFiZWxQb3NpdGlvbiIsImhlYWRlciIsImNvbnRlbnQiLCJwcmltYXJ5Il0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUVBOzs7O0FBQ0E7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBTEEsSUFBSUEsZUFBZSxtRkFBbkIsQyxDQUVrRTs7O0FBS2xFLElBQUlDLGlCQUFpQixVQUFVQyxVQUFWLEVBQXNCO0FBQ3pDLDBCQUFVRCxj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